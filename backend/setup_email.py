#!/usr/bin/env python3
"""
Email Configuration Setup Script for Australia Jobs
==================================================

This script helps you set up email configuration for the email verification system.
"""

import os
import getpass

def setup_gmail_config():
    """Setup Gmail SMTP configuration"""
    print("\n=== Gmail Configuration ===")
    print("To use Gmail, you need to:")
    print("1. Enable 2-factor authentication on your Google account")
    print("2. Generate an App Password (not your regular password)")
    print("3. Use the App Password in this configuration")
    print("4. Visit: https://support.google.com/accounts/answer/185833")
    print()
    
    email = input("Enter your Gmail address: ").strip()
    print("\nNOTE: Use your 16-character App Password, not your regular password!")
    app_password = getpass.getpass("Enter your Gmail App Password: ").strip()
    sender_email = input(f"Sender email (optional, default: {email}): ").strip()
    
    config = {
        'MAIL_SERVER': 'smtp.gmail.com',
        'MAIL_PORT': '587',
        'MAIL_USE_TLS': 'True',
        'MAIL_USERNAME': email,
        'MAIL_PASSWORD': app_password,
        'FRONTEND_URL': 'http://localhost:5173'
    }
    
    # Only set MAIL_DEFAULT_SENDER if explicitly provided
    if sender_email:
        config['MAIL_DEFAULT_SENDER'] = sender_email
    
    return config

def setup_other_provider():
    """Setup other email provider configuration"""
    print("\n=== Custom Email Provider Configuration ===")
    
    server = input("SMTP Server (e.g., smtp.outlook.com): ").strip()
    port = input("SMTP Port (default: 587): ").strip() or "587"
    use_tls = input("Use TLS? (y/N): ").strip().lower() == 'y'
    username = input("Email username: ").strip()
    password = getpass.getpass("Email password: ").strip()
    sender = input(f"Sender email (optional, default: {username}): ").strip()
    
    config = {
        'MAIL_SERVER': server,
        'MAIL_PORT': port,
        'MAIL_USE_TLS': str(use_tls),
        'MAIL_USERNAME': username,
        'MAIL_PASSWORD': password,
        'FRONTEND_URL': 'http://localhost:5173'
    }
    
    # Only set MAIL_DEFAULT_SENDER if explicitly provided
    if sender:
        config['MAIL_DEFAULT_SENDER'] = sender
    
    return config

def write_env_file(config):
    """Write configuration to .env file"""
    env_path = os.path.join(os.path.dirname(__file__), '.env')
    
    # Read existing .env if it exists
    existing_config = {}
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    existing_config[key] = value
    
    # Update with new config
    existing_config.update(config)
    
    # Write updated config
    with open(env_path, 'w') as f:
        f.write("# Australia Jobs Environment Configuration\n")
        f.write("# Generated by setup_email.py\n\n")
        
        # Write email config
        f.write("# Email Configuration\n")
        for key in ['MAIL_SERVER', 'MAIL_PORT', 'MAIL_USE_TLS', 'MAIL_USERNAME', 'MAIL_PASSWORD', 'MAIL_DEFAULT_SENDER', 'FRONTEND_URL']:
            if key in existing_config:
                f.write(f"{key}={existing_config[key]}\n")
        f.write("\n")
        
        # Write other existing config
        f.write("# Other Configuration\n")
        for key, value in existing_config.items():
            if not key.startswith('MAIL_') and key != 'FRONTEND_URL':
                f.write(f"{key}={value}\n")
    
    print(f"\n‚úÖ Configuration saved to {env_path}")

def test_configuration():
    """Test the email configuration"""
    print("\n=== Testing Email Configuration ===")
    
    try:
        # Import after setting up config
        from email_service import send_email
        
        test_email = input("Enter an email address to send a test email to: ").strip()
        if not test_email:
            print("Skipping email test...")
            return
        
        print("Sending test email...")
        success, message = send_email(
            to=test_email,
            subject="Australia Jobs - Email Configuration Test",
            html_body="""
            <h2>Email Configuration Test</h2>
            <p>Congratulations! Your email configuration is working correctly.</p>
            <p>Email verification is now enabled for Australia Jobs.</p>
            """
        )
        
        if success:
            print("‚úÖ Test email sent successfully!")
            print("Check your inbox to confirm email delivery.")
        else:
            print(f"‚ùå Failed to send test email: {message}")
            print("Please check your configuration and try again.")
            
    except Exception as e:
        print(f"‚ùå Error testing email configuration: {e}")
        print("Please check your configuration and make sure Flask app is properly set up.")

def main():
    print("üöÄ Australia Jobs Email Configuration Setup")
    print("=" * 50)
    
    print("\nThis script will help you set up email verification for Australia Jobs.")
    print("Choose your email provider:")
    print("1. Gmail (recommended)")
    print("2. Other email provider")
    
    choice = input("\nEnter your choice (1 or 2): ").strip()
    
    if choice == "1":
        config = setup_gmail_config()
    elif choice == "2":
        config = setup_other_provider()
    else:
        print("Invalid choice. Exiting...")
        return
    
    write_env_file(config)
    
    print("\nüéâ Email configuration complete!")
    print("\nNext steps:")
    print("1. Restart your Flask server to load the new configuration")
    print("2. Test email verification by registering a new user")
    print("3. Check the server logs for any email-related errors")
    
    test_choice = input("\nWould you like to send a test email now? (y/N): ").strip().lower()
    if test_choice == 'y':
        test_configuration()

if __name__ == "__main__":
    main()